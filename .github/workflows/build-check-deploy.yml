name: CI/CD Process
on:
  workflow_call:
  workflow_dispatch:

jobs:
  check-secrets:
    runs-on: ubuntu-24.04
    outputs:
      run-with-secrets: ${{ steps.require-secrets.outputs.run-with-secrets }}
    steps:
      - name: Find if secrets are available
        id: detect-secrets
        uses: DanySK/are-secrets-available@1.0.0
        with:
          secrets: ${{ toJson(secrets) }}

      - name: Set condition
        id: require-secrets
        run: |
          echo "run-with-secrets=${{ steps.detect-secrets.outputs.has-secrets == 'true' && !github.event.repository.fork }}" >> $GITHUB_OUTPUT

  precompute-next-version:
    runs-on: ubuntu-24.04
    outputs:
      will-release: ${{ steps.compute-next-version.outputs.will-release }}
      next-version: ${{ steps.compute-next-version.outputs.next-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Compute next release version
        id: compute-next-version
        uses: nicolasfara/precompute-semantic-release-version-action@2.0.2
        with:
          github-token: ${{ github.token }}

  test-and-check:
    runs-on: ubuntu-latest
    env:
      DATASETS_PATH: "../../datasets/"
      OUTPUTS_PATH: "../../outputs/"
      RESULTS_PATH: "../../results/"
      INPUTS_PATH: "../../inputs/"
      AUTO_OUTPUTS_PATH: "../../outputs/"
    needs:
      - check-secrets
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install dependencies
        run: curl -sSL https://install.python-poetry.org | python3 - && poetry install

      - name: Run tests
        run: poetry run poe test

  release:
    concurrency:
      # Only one release job at a time per branch, as only master releases.
      group: release-${{ github.event.number || github.ref }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-24.04
    needs:
      - check-secrets
      - precompute-next-version
      - test-and-check
    if: |
      always() &&
      needs.check-secrets.outputs.run-with-secrets == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
        with:
          token: ${{ secrets.DEPLOYMENT_TOKEN }}
      - uses: actions/setup-node@v5.0.0
        with:
          cache: npm
          node-version: lts/*
          registry-url: 'https://registry.npmjs.org'
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEXT_VERSION: ${{ needs.precompute-next-version.outputs.next-version }}
        run: |
          npm ci
          npx semantic-release

  success:
    runs-on: ubuntu-latest
    needs:
      - test-and-check
      - release
    if: >-
      always() && (
        contains(join(needs.*.result, ','), 'failure')
        || !contains(join(needs.*.result, ','), 'cancelled')
      )
    steps:
      - name: Verify that there were no failures
        run: ${{ !contains(join(needs.*.result, ','), 'failure') }}